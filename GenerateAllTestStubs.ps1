# Set your source and test directories
$srcDir = "src"
$testDir = "tests/Users.UnitTests/AutoGenerated"

# Ensure output directory exists
if (-not (Test-Path $testDir)) {
    New-Item -ItemType Directory -Path $testDir | Out-Null
}

# Find all .cs files in the source directory
$csFiles = Get-ChildItem -Path $srcDir -Recurse -Filter *.cs

foreach ($file in $csFiles) {
    $content = Get-Content $file.FullName -Raw

    # Find the namespace
    $namespaceMatch = [regex]::Match($content, 'namespace\s+([a-zA-Z0-9_.]+)')
    $namespace = if ($namespaceMatch.Success) { $namespaceMatch.Groups[1].Value } else { "AutoGenerated" }

    # Find all public classes
    $classMatches = [regex]::Matches($content, 'public\s+class\s+([a-zA-Z0-9_]+)')
    foreach ($classMatch in $classMatches) {
        $className = $classMatch.Groups[1].Value

        # Find all public methods in the class
        $methodPattern = "public\s+(static\s+)?([a-zA-Z0-9_<>,\[\]]+)\s+([a-zA-Z0-9_]+)\s*\(([^)]*)\)"
        $methodMatches = [regex]::Matches($content, $methodPattern)

        if ($methodMatches.Count -eq 0) { continue }

        $testFile = Join-Path $testDir "${className}Tests.cs"
        $testClassHeader = @"
using Xunit;

namespace $namespace.Tests
{
    public class ${className}Tests
    {
"@

        $testClassFooter = @"
    }
}
"@

        $testMethods = @()
        foreach ($methodMatch in $methodMatches) {
            $methodName = $methodMatch.Groups[3].Value
            $testMethod = @"
        [Fact]
        public void ${methodName}_Should_BehaveAsExpected()
        {
            // TODO: Arrange

            // TODO: Act

            // TODO: Assert
        }
"@
            $testMethods += $testMethod
        }

        # Write or overwrite the test file
        $testContent = $testClassHeader + ($testMethods -join "`n") + $testClassFooter
        $testContent | Out-File $testFile -Encoding utf8
        Write-Host "Generated: $testFile"
    }
}