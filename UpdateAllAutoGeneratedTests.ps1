$srcDir = "src"
$testDir = "tests/Users.UnitTests/AutoGenerated/Users"

# Helper: Find source file for a given class name
function Find-SourceFile($className) {
    $files = Get-ChildItem -Path $srcDir -Recurse -Filter "$className.cs"
    if ($files.Count -gt 0) { return $files[0].FullName }
    return $null
}

# For each test file in AutoGenerated/Users
Get-ChildItem -Path $testDir -Filter *.cs | ForEach-Object {
    $testFile = $_.FullName
    $className = $_.BaseName -replace "Tests$", ""
    $srcFile = Find-SourceFile $className

    if (-not $srcFile) {
        Write-Host "Source file not found for $className"
        return
    }

    $content = Get-Content $srcFile -Raw

    # Find the namespace
    $namespaceMatch = [regex]::Match($content, 'namespace\s+([a-zA-Z0-9_.]+)')
    $namespace = if ($namespaceMatch.Success) { $namespaceMatch.Groups[1].Value } else { "AutoGenerated" }

    # Find all public methods in the class
    $methodPattern = "public\s+(static\s+)?([a-zA-Z0-9_<>,\[\]]+)\s+([a-zA-Z0-9_]+)\s*\(([^)]*)\)"
    $methodMatches = [regex]::Matches($content, $methodPattern)

    $testClassHeader = @"
using Xunit;

namespace $namespace.Tests
{
    public class ${className}Tests
    {
"@

    $testClassFooter = @"
    }
}
"@

    $testMethods = @()
    foreach ($methodMatch in $methodMatches) {
        $methodName = $methodMatch.Groups[3].Value
        $params = $methodMatch.Groups[4].Value
        $paramList = @()
        if ($params.Trim() -ne "") {
            $paramPairs = $params.Split(",")
            foreach ($pair in $paramPairs) {
                $typeAndName = $pair.Trim() -split "\s+"
                if ($typeAndName.Length -eq 2) {
                    $paramList += "$($typeAndName[1]): $($typeAndName[0])"
                }
            }
        }
        $paramArgs = ($paramList | ForEach-Object { $_.Split(":")[0].Trim() }) -join ", "
        $paramArrange = ($paramList | ForEach-Object { "            var $($_.Split(':')[0].Trim()) = default($($_.Split(':')[1].Trim()));" }) -join "`n"

        $testMethod = @"
        [Fact]
        public void ${methodName}_Should_BehaveAsExpected()
        {
$paramArrange
            // TODO: Instantiate class under test

            // Act
            // var result = instance.$methodName($paramArgs);

            // Assert
            // TODO: Add assertions
        }
"@
        $testMethods += $testMethod
    }

    # Write or overwrite the test file
    $testContent = $testClassHeader + ($testMethods -join "`n") + $testClassFooter
    $testContent | Out-File $testFile -Encoding utf8
    Write-Host "Updated: $testFile"
}