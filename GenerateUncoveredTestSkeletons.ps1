# Path to Cobertura report
$coverageReport = "tests/Users.UnitTests/TestResults/402f0bc2-45bc-4e89-9e5f-333fe6beac9a/coverage.cobertura.xml"
# Output base directory for new test files
$testBaseDir    = "tests/Users.UnitTests\AutoGenerated"

# Ensure the base output directory exists
if (-not (Test-Path $testBaseDir)) {
    New-Item -ItemType Directory -Path $testBaseDir -Force | Out-Null
}

# Build a regex of invalid filename/folder chars
$invalidChars = [IO.Path]::GetInvalidFileNameChars() + [IO.Path]::GetInvalidPathChars()
$invalidPattern = ([Regex]::Escape(($invalidChars -join ""))) -replace '\\ ', '\s'  # escape for regex

# Load Cobertura XML
[xml]$xml = Get-Content $coverageReport

# Find all classes with 0% coverage
$uncovered = $xml.coverage.packages.package.classes.class |
    Where-Object { $_."line-rate" -eq "0" }

foreach ($cls in $uncovered) {
    # skip compiler-generated or nested
    if ($cls.name -match '[\+<]') { continue }

    # sanitize full class name: remove invalid chars, replace with underscore
    $cleanName = ($cls.name -replace "[$invalidPattern]", "_")

    # split into namespace + type
    $parts = $cleanName -split '[._]' 
    $ns   = $parts[0]        # first token as namespace folder
    $type = $parts[-1]       # last token as class name

    # final file and directory
    $dir      = Join-Path $testBaseDir $ns
    $fileName = "${type}Tests.cs"
    $testFile = Join-Path $dir $fileName

    # ensure directory exists
    if (-not (Test-Path $dir)) {
        New-Item -ItemType Directory -Path $dir -Force | Out-Null
    }

    # only create if not already present
    if (-not (Test-Path $testFile)) {
        $content = @"
using Xunit;

namespace ${ns}.Tests
{
    public class ${type}Tests
    {
        [Fact]
        public void TestMethod1()
        {
            // TODO: implement tests for $type
        }
    }
}
"@

        # write out
        $content | Out-File -FilePath $testFile -Encoding utf8 -Force
        Write-Host "Created: $testFile"
    }
    else {
        Write-Host "Skipped (exists): $testFile"
    }
}
